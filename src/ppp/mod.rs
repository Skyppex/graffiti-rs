pub mod receive;
pub mod send;

use std::path::PathBuf;

use futures_util::stream::SplitSink;
use serde::{Deserialize, Serialize};
use tokio::io::{AsyncRead, AsyncWrite};
use tokio_tungstenite::{tungstenite::Message, WebSocketStream};

use crate::{csp, utility_types::*};

pub type WsWriter<S> = SplitSink<WebSocketStream<S>, Message>;

pub trait AsyncStream: AsyncWrite + AsyncRead + Unpin {}

impl<S: AsyncWrite + AsyncRead + Unpin> AsyncStream for S {}

pub trait Req {
    fn id(&self) -> RequestId;
    fn method(&self) -> String;
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Request<T> {
    pub id: Option<RequestId>,
    pub method: Method,
    pub params: Option<T>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Response<T> {
    pub id: RequestId,
    pub result: Option<T>,
    // pub error: (),
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Notification<T> {
    pub method: Method,
    pub params: Option<T>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct InitializeRequest {
    pub process_id: Option<i32>,
    pub client_info: Option<ClientInfo>,
    pub root_path: Option<String>,
    // #[serde(rename = "initializeOptions")]
    // initialize_options: Option<InitializeOptions>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct ClientInfo {
    pub name: String,
    pub version: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct InitializeResponse {
    pub host_info: Option<HostInfo>,
    // client id generated by the host.
    // used to identify the client in subsequent messages
    pub client_id: ClientId,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct HostInfo {
    pub name: String,
    pub version: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct InitializedNotification {
    pub client_id: ClientId,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct ShutdownRequest;

#[derive(Debug, Serialize, Deserialize)]
pub struct ShutdownResponse;

#[derive(Debug, Serialize, Deserialize)]
pub struct CursorMovedNotification {
    pub client_id: ClientId,
    pub location: DocumentLocation,
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct DocumentLocation {
    pub uri: PathBuf,
    pub line: u32,
    pub column: u32,
}

impl From<csp::DocumentLocation> for DocumentLocation {
    fn from(location: csp::DocumentLocation) -> Self {
        Self {
            uri: location.uri,
            line: location.line,
            column: location.column,
        }
    }
}
